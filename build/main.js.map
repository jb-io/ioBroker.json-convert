{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport {FlattenedObject, ObjectConfiguration, ObjectConfigurationList, ScalarValue} from './lib/typedef';\nimport JsonFlattener from './json-flattener';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass JsonConvert extends utils.Adapter {\n\n    private objectConfigurations: ObjectConfigurationList = {};\n    private flattener: JsonFlattener;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'json-convert',\n        });\n        this.flattener = new JsonFlattener();\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        for (const objectConfig of this.config.objects) {\n            this.objectConfigurations[objectConfig.objectId] = objectConfig;\n            this.assertDeviceObject(objectConfig.alias);\n            this.subscribeForeignStates(objectConfig.objectId)\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (!state) {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n            return;\n        }\n\n        // The state was changed\n        if (state.ack && this.objectConfigurations[id]) {\n            await this.onJsonStateChanged(state, this.objectConfigurations[id]);\n        }\n    }\n\n    private assertDeviceObject(deviceName: string): void {\n        this.setObjectNotExists(deviceName, {\n            type: 'device',\n            common: {\n                name: deviceName,\n                icon: '/icons/device-icon.svg',\n            },\n            native: {},\n        });\n    }\n\n    private async writeObject(id: string, value: ioBroker.StateValue): Promise<void> {\n        await this.setObjectNotExistsAsync(id, {\n            type: 'state',\n            common: {\n                name: id,\n                type: 'mixed',\n                role: 'indicator',\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.setStateAsync(id, value, true);\n    }\n\n    private async iterateAsync(iterable: FlattenedObject, callback: (key: string, item: ScalarValue) => Promise<void>): Promise<void> {\n        const promises: Promise<void>[] = [];\n        for (const key in iterable) {\n            promises.push(callback(key, iterable[key]));\n        }\n\n        await Promise.allSettled(promises);\n    }\n\n    private async onJsonStateChanged(state: ioBroker.State, config: ObjectConfiguration): Promise<void> {\n\n        const flatStates = this.flattener.flattenJson(state.val as string);\n        if (flatStates) {\n            await this.iterateAsync(\n                flatStates,\n                (key, value) => this.writeObject(`${(config.alias)}.${key}`, value)\n            );\n        }\n    }\n\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new JsonConvert(options);\n} else {\n    // otherwise start the instance directly\n    (() => new JsonConvert())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAEvB,4BAA0B;AAK1B,MAAM,oBAAoB,MAAM,QAAQ;AAAA,EAK7B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AAPL,SAAQ,uBAAgD,CAAC;AAQrD,SAAK,YAAY,IAAI,sBAAAA,QAAc;AACnC,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAGnC,eAAW,gBAAgB,KAAK,OAAO,SAAS;AAC5C,WAAK,qBAAqB,aAAa,YAAY;AACnD,WAAK,mBAAmB,aAAa,KAAK;AAC1C,WAAK,uBAAuB,aAAa,QAAQ;AAAA,IACrD;AAAA,EACJ;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AAEA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAKA,MAAc,cAAc,IAAY,OAAyD;AAC7F,QAAI,CAAC,OAAO;AAER,WAAK,IAAI,KAAK,SAAS,YAAY;AACnC;AAAA,IACJ;AAGA,QAAI,MAAM,OAAO,KAAK,qBAAqB,KAAK;AAC5C,YAAM,KAAK,mBAAmB,OAAO,KAAK,qBAAqB,GAAG;AAAA,IACtE;AAAA,EACJ;AAAA,EAEQ,mBAAmB,YAA0B;AACjD,SAAK,mBAAmB,YAAY;AAAA,MAChC,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,YAAY,IAAY,OAA2C;AAC7E,UAAM,KAAK,wBAAwB,IAAI;AAAA,MACnC,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AACD,UAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,EAC5C;AAAA,EAEA,MAAc,aAAa,UAA2B,UAA4E;AAC9H,UAAM,WAA4B,CAAC;AACnC,eAAW,OAAO,UAAU;AACxB,eAAS,KAAK,SAAS,KAAK,SAAS,IAAI,CAAC;AAAA,IAC9C;AAEA,UAAM,QAAQ,WAAW,QAAQ;AAAA,EACrC;AAAA,EAEA,MAAc,mBAAmB,OAAuB,QAA4C;AAEhG,UAAM,aAAa,KAAK,UAAU,YAAY,MAAM,GAAa;AACjE,QAAI,YAAY;AACZ,YAAM,KAAK;AAAA,QACP;AAAA,QACA,CAAC,KAAK,UAAU,KAAK,YAAY,GAAI,OAAO,SAAU,OAAO,KAAK;AAAA,MACtE;AAAA,IACJ;AAAA,EACJ;AAEJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,YAAY,OAAO;AACpG,OAAO;AAEH,GAAC,MAAM,IAAI,YAAY,GAAG;AAC9B;",
  "names": ["JsonFlattener"]
}
